{"version":3,"file":"component---src-pages-index-2-tsx-79abf7b93615f34e0895.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/ProtectedRoute.tsx","webpack://gatsby-starter-default/./src/components/Dialer.tsx","webpack://gatsby-starter-default/./src/pages/index2.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { navigate } from \"gatsby\";\nimport { auth } from \"../firebase/firebase-config\";\n\nconst ProtectedRoute = ({ children }: { children: (user: any) => React.ReactNode }) => {\n  const [user, setUser] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      if (currentUser) {\n        setUser(currentUser); // Set the authenticated user\n      } else {\n        navigate(\"/login\"); // Redirect to login if not authenticated\n      }\n      setLoading(false); // Set loading to false after checking auth state\n    });\n\n    // Cleanup the subscription when the component is unmounted\n    return () => unsubscribe();\n  }, []);\n\n  if (loading) {\n    // You can return a loading spinner or message here\n    return <p>Loading...</p>;\n  }\n\n  return user ? children(user) : null; // Only render children if the user is authenticated\n};\n\nexport default ProtectedRoute;","import React, { useEffect, useState } from \"react\";\nimport { auth } from \"../firebase/firebase-config\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nconst DOMAIN : string = 'makethemcall.me'\n\n\n\nexport default ({ user }:{ user: any }) => {\n  const [device, setDevice] = useState<any>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState(\"+12086962033\");\n  const [logMessages, setLogMessages] = useState<string[]>([]);\n  const [incomingConnection, setIncomingConnection] = useState<any>(null);\n  const [smsMessage, setSmsMessage] = useState(\"\");\n  const [smsLog, setSmsLog] = useState<string[]>([]);\n  const [incomingSms, setIncomingSms] = useState<string[]>([]); // Stores received SMS\n  const [websocketValue, setWebsocketValue] = useState<any>(\"\"); // Stores received SMS\n  \n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    if(!user) return;\n   \n\n\n    import(\"twilio-client\").then((Twilio) => {\n      const fetchToken = async () => {\n        try {\n\n    \n \n          const token = await user.getIdToken();\n\n          const response = await fetch(`https://${DOMAIN}/api/generate-token`, {\n            method: \"POST\",\n            headers: { \n              \"Content-Type\": \"application/json\",\n         \n              \"Authorization\": `Bearer ${ token }`  // ‚úÖ Include token\n            \n            },\n            body: JSON.stringify({ identity: \"the_user_id\" }),\n          });\n\n          if (!response.ok) throw new Error(\"Failed to fetch token\");\n          const data = await response.json();\n          console.log(`üîë Token: ${data.token}`);\n          const twilioDevice: any = new Twilio.Device(data.token);\n\n          twilioDevice.on(\"ready\", () => console.log(\"‚úÖ Twilio.Device Ready!\"));\n          twilioDevice.on(\"error\", (error: any) => console.log(`‚ùå Twilio.Device Error: ${error.message}`));\n          twilioDevice.on(\"connect\", () => setIsConnected(true));\n          twilioDevice.on(\"disconnect\", () => {\n            setIsConnected(false);\n            setIncomingConnection(null);\n          });\n\n          twilioDevice.on(\"incoming\", (conn: any) => {\n            console.log(\"üìû Incoming call detected:\", conn);\n            setIncomingConnection(conn);\n          });\n\n          setDevice(twilioDevice);\n        } catch (error) {\n          console.log(\"üö® Could not get a token from server!\");\n        }\n      };\n\n      fetchToken();\n    });\n  }, [user]);\n    \n\n\n\nconst WebSocketComponent = () => {\n    const [incomingSms, setIncomingSms] = useState([]);\n    let ws: WebSocket | null = null;\n    let reconnectAttempts = 0;\n  \n    useEffect(() => {\n        const connectWebSocket = () => {\n            if (ws) {\n                ws.close(); // Ensure previous WebSocket is closed before reconnecting\n            }\n      \n            ws = new WebSocket(`wss://${DOMAIN}/ws/`);\n\n            ws.onopen = () => {\n                console.log(\"‚úÖ WebSocket connected\");\n                reconnectAttempts = 0; // Reset attempts on success\n            };\n\n            ws.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    console.log(\"üì© New message:\", data);\n                    //@ts-ignore\n                    setIncomingSms((prev) => [...prev, data]); // Update state with new message\n                } catch (err) {\n                    console.error(\"‚ùå Failed to parse WebSocket message:\", err);\n                }\n            };\n\n            ws.onerror = (error) => {\n                console.error(\"‚ùå WebSocket Error:\", error);\n            };\n\n            ws.onclose = () => {\n                console.log(\"üî¥ WebSocket disconnected. Reconnecting...\");\n                reconnectAttempts++;\n                let reconnectDelay = Math.min(5000 * reconnectAttempts, 30000); // Exponential backoff, max 30s\n                setTimeout(connectWebSocket, reconnectDelay);\n            };\n        };\n\n        connectWebSocket();\n\n        return () => {\n            if (ws) ws.close(); // Cleanup WebSocket on component unmount\n        };\n    }, []); // Run once on mount\n\n    return (\n        <div>\n            <h2>Incoming SMS:</h2>\n            \n            <ul>\n                {incomingSms.map((msg : any, index) => (\n                    <li key={index}>{msg?.message ?? JSON.stringify(msg)}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\n\n\n\n\n  const makeCall = async () => {\n    try {\n      const token = await user.getIdToken();\n      const response = await fetch(`https://${DOMAIN}/api/make-call`, {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${ token }`  // ‚úÖ Include token\n        },\n        body: JSON.stringify({ to: phoneNumber }),\n      });\n\n      const result = await response.json();\n      if (!response.ok) throw new Error(result.error || \"Failed to make call\");\n      console.log(`üìû Calling ${phoneNumber}...`);\n    } catch (error) {\n      console.log(`‚ö†Ô∏è Call error: ${(error as any).message}`);\n    }\n  };\n\n  const hangUp = () => {\n    if (device) {\n      console.log(\"üî¥ Hanging up...\");\n      device.disconnectAll();\n    }\n  };\n\n  const answerCall = () => {\n    if (incomingConnection) {\n      console.log(\"‚úÖ Answering call...\");\n      incomingConnection.accept();\n      setIsConnected(true);\n    }\n  };\n\n  const rejectCall = () => {\n    if (incomingConnection) {\n      console.log(\"‚ùå Rejecting call...\");\n      incomingConnection.reject();\n      setIncomingConnection(null);\n    }\n  };\n\n  const sendSms = async () => {\n    try {\n      const token = await user.getIdToken();\n      const response = await fetch(`https://${DOMAIN}/api/send-sms`, {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${ token }`  // ‚úÖ Include token\n        },\n        body: JSON.stringify({ to: phoneNumber, message: smsMessage }),\n      });\n\n      const result = await response.json();\n      if (!response.ok) throw new Error(result.error || \"Failed to send SMS\");\n\n      setSmsLog((prev) => [...prev, `Sent: ${smsMessage} to ${phoneNumber}`]);\n      setSmsMessage(\"\");\n    } catch (error) {\n      console.log(`‚ùå SMS Error: ${(error as any).message}`);\n    }\n  };\n\n  if(!user) return <>not logged in</>\n  return (\n    <div style={{ padding: \"1.5rem\", backgroundColor: \"#1a1a1a\", color: \"white\", minHeight: \"100vh\" }}>\n      <h1 style={{ fontSize: \"1.5rem\", marginBottom: \"1rem\" }}>Twilio Client</h1>\n      <WebSocketComponent/>\n      <input\n        type=\"text\"\n        value={phoneNumber}\n        onChange={(e) => setPhoneNumber(e.target.value)}\n        placeholder=\"Enter a phone #\"\n        style={{ padding: \"0.5rem\", borderRadius: \"4px\", backgroundColor: \"#333\", color: \"white\", width: \"100%\" }}\n      />\n\n      <button onClick={makeCall} disabled={isConnected} style={{ backgroundColor: \"green\", padding: \"0.5rem\", borderRadius: \"4px\", width: \"100%\", marginTop: \"0.5rem\" }}>\n        Call\n      </button>\n      <button onClick={hangUp} disabled={!isConnected} style={{ backgroundColor: \"red\", padding: \"0.5rem\", borderRadius: \"4px\", width: \"100%\", marginTop: \"0.5rem\" }}>\n        Hang Up\n      </button>\n\n      {incomingConnection && (\n        <>\n          <h2>Incoming Call</h2>\n          <button onClick={answerCall} style={{ backgroundColor: \"blue\", padding: \"0.5rem\", borderRadius: \"4px\", width: \"100%\", marginTop: \"0.5rem\" }}>\n            Answer Call\n          </button>\n          <button onClick={rejectCall} style={{ backgroundColor: \"gray\", padding: \"0.5rem\", borderRadius: \"4px\", width: \"100%\", marginTop: \"0.5rem\" }}>\n            Reject Call\n          </button>\n        </>\n      )}\n\n      <h2>Send SMS</h2>\n      <input type=\"text\" value={smsMessage} onChange={(e) => setSmsMessage(e.target.value)} placeholder=\"Enter SMS message\" style={{ padding: \"0.5rem\", borderRadius: \"4px\", backgroundColor: \"#333\", color: \"white\", width: \"100%\" }} />\n      <button onClick={sendSms} style={{ backgroundColor: \"blue\", padding: \"0.5rem\", borderRadius: \"4px\", width: \"100%\", marginTop: \"0.5rem\" }}>\n        Send SMS\n      </button>\n\n      <h2>Incoming SMS</h2>\n      <div style={{ backgroundColor: \"#333\", padding: \"1rem\", borderRadius: \"4px\", maxHeight: \"12rem\", overflowY: \"auto\" }}>\n        {/* {incomingSms.map((msg, index) => (\n          <p key={index} style={{ fontSize: \"0.875rem\" }}>&gt; {msg}</p>\n        ))} */}\n      </div>\n    </div>\n  );\n};\n","import React from 'react'\nimport Dialer from \"../components/Dialer\";\nimport ProtectedRoute from \"../components/ProtectedRoute\";\n\nexport default () => {\n  return (\n    <ProtectedRoute>\n        {(user) => <Dialer user={user} />}\n    </ProtectedRoute>\n  );\n}"],"names":["_ref","children","user","setUser","useState","loading","setLoading","useEffect","unsubscribe","onAuthStateChanged","auth","currentUser","navigate","React","DOMAIN","device","setDevice","isConnected","setIsConnected","phoneNumber","setPhoneNumber","logMessages","setLogMessages","incomingConnection","setIncomingConnection","smsMessage","setSmsMessage","smsLog","setSmsLog","incomingSms","setIncomingSms","websocketValue","setWebsocketValue","window","then","Twilio","async","token","getIdToken","response","fetch","method","headers","body","JSON","stringify","identity","ok","Error","data","json","console","log","twilioDevice","Device","on","error","message","conn","fetchToken","WebSocketComponent","ws","reconnectAttempts","connectWebSocket","close","WebSocket","onopen","onmessage","event","parse","prev","err","onerror","onclose","reconnectDelay","Math","min","setTimeout","map","msg","index","key","style","padding","backgroundColor","color","minHeight","fontSize","marginBottom","type","value","onChange","e","target","placeholder","borderRadius","width","onClick","to","result","disabled","marginTop","disconnectAll","accept","reject","maxHeight","overflowY","ProtectedRoute","Dialer"],"sourceRoot":""}